"use client";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectGroup,
  SelectValue,
  SelectItem,
} from "./ui/select";
import AdditionalServicesSelect from "./AdditionalServicesSelect";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import axios from "axios";
import { X } from "lucide-react";
import { useToast } from "./ui/use-toast";
import { useState } from "react";
import { Textarea } from "./ui/textarea";
import { cn } from "@/lib/utils";

const formSchema = z.object({
  email: z.string().email({ message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –ø–æ—à—Ç–∞" }),
  name: z.string().min(1, "–Ü–º º—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"),
  phone: z.string().min(10, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"),
  city: z.string({ message: "–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ" }),
  premisesType: z.string({ message: "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è" }),
  cleaningType: z.string({ message: "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è" }),
  additionalServices: z.array(z.string()).optional(),
  comment: z.string().optional(),
});

type FormDataType = z.infer<typeof formSchema>;

interface Props {
  className?: string;
}

export default function OrderForm({ className }: Props) {
  const {
    register,
    handleSubmit,
    setValue,
    setError,
    watch,
    formState: { errors },
  } = useForm<FormDataType>({
    resolver: zodResolver(formSchema),
  });

  const { toast } = useToast();
  const [clearServices, setClearServices] = useState(false);

  const clearErrors = () => {
    setError("email", { message: "" });
    setError("name", { message: "" });
    setError("phone", { message: "" });
    setError("city", { message: "" });
    setError("premisesType", { message: "" });
    setError("cleaningType", { message: "" });
  };

  const clearForm = () => {
    setValue("email", "");
    setValue("name", "");
    setValue("phone", "");
    setValue("city", "");
    setValue("premisesType", "");
    setValue("cleaningType", "");
    setClearServices(true);
    setValue("comment", "");
  };

  const onSubmit = async (data: FormDataType) => {
    try {
      await axios.post("/api/make-order", data);
      clearForm();
      toast({
        description: (
          <>
            <h4 className="text-green-600 font-bold">{`–î—è–∫—É—é –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!`}</h4>
            <p className="text-slate-900">
              –ú–∏ –∑–≤&apos;—è–∂–µ–º–æ—Å—å –∑ –≤–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º –≥–æ–¥–∏–Ω–∏
            </p>
          </>
        ),
      });
    } catch (error) {
      console.error(error);
      clearForm();
      toast({
        description: (
          <>
            <h4 className="text-red-600 font-bold">–ô–æ–π!</h4>
            <p className="text-slate-900">
              –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ
              —Ä–∞–∑.
            </p>
          </>
        ),
      });
    }
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button className={cn("sm:w-fit", className)}>
          –ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è
        </Button>
      </DialogTrigger>
      <DialogContent className="w-[450px] sm:max-w-[425px] lg:w-[700px] rounded-xl h-fit overflow-auto">
        <DialogClose
          className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
          onClick={clearErrors}
        >
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </DialogClose>
        <DialogHeader>
          <DialogTitle>–ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è</DialogTitle>
          <DialogDescription>
            –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É, —ñ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–±–µ—Ä–µ –ø—Ä–æ—Ç—è–≥–æ–º 10 —Ö–≤–∏–ª–∏–Ωüíô
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="flex flex-col gap-4">
            <div>
              <Input
                id="name"
                {...register("name")}
                placeholder="–Ü–º º—è"
                value={watch("name")}
              />
              {errors.name?.message && (
                <p className="text-red-500">{errors.name.message}</p>
              )}
            </div>
            <div>
              <Input
                id="phone"
                {...register("phone")}
                placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                value={watch("phone")}
              />
              {errors.phone?.message && (
                <p className="text-red-500">{errors.phone.message}</p>
              )}
            </div>
            <div>
              <Input
                id="email"
                {...register("email")}
                placeholder="–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞"
                value={watch("email")}
              />
              {errors.email?.message && (
                <p className="text-red-500">{errors.email.message}</p>
              )}
            </div>
            <div>
              <Select
                {...register("city")}
                onValueChange={(e) => setValue("city", e)}
                // defaultValue="–î–Ω—ñ–ø—Ä–æ"
                value={watch("city")}
              >
                <SelectTrigger className="focus-visible:border-0">
                  <SelectValue placeholder="–ú—ñ—Å—Ç–æ" />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectItem defaultChecked value="–î–Ω—ñ–ø—Ä–æ">
                      –î–Ω—ñ–ø—Ä–æ
                    </SelectItem>
                    <SelectItem value="–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å—å–∫">–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å—å–∫</SelectItem>
                    <SelectItem value="–ö–∏—ó–≤">–ö–∏—ó–≤</SelectItem>
                  </SelectGroup>
                </SelectContent>
              </Select>
              {errors.city?.message && (
                <p className="text-red-500">{errors.city.message}</p>
              )}
            </div>
            <div>
              <Select
                {...register("premisesType")}
                onValueChange={(e) => setValue("premisesType", e)}
                value={watch("premisesType")}
              >
                <SelectTrigger className="focus-visible:border-0">
                  <SelectValue placeholder="–¢–∏–ø –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è" />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectItem value="–ñ–∏—Ç–ª–æ–≤–µ">–ñ–∏—Ç–ª–æ–≤–µ</SelectItem>
                    <SelectItem value="–û—Ñ—ñ—Å–Ω–µ">–û—Ñ—ñ—Å–Ω–µ</SelectItem>
                    <SelectItem value="–ì–æ—Ç–µ–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä">
                      –ì–æ—Ç–µ–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä
                    </SelectItem>
                    <SelectItem value="–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–µ">–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–µ</SelectItem>
                  </SelectGroup>
                </SelectContent>
              </Select>
              {errors.premisesType?.message && (
                <p className="text-red-500">{errors.premisesType.message}</p>
              )}
            </div>
            <div>
              <Select
                {...register("cleaningType")}
                onValueChange={(e) => setValue("cleaningType", e)}
                value={watch("cleaningType")}
              >
                <SelectTrigger className="focus-visible:border-0">
                  <SelectValue placeholder="–¢–∏–ø –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è" />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectItem value="–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ">
                      –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è
                    </SelectItem>
                    <SelectItem value="–ü–æ–≤–µ—Ä—Ö–Ω–µ–≤–µ">
                      –ü–æ–≤–µ—Ä—Ö–Ω–µ–≤–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è
                    </SelectItem>
                    <SelectItem value="–ü—ñ—Å–ª—è —Ä–µ–º–æ–Ω—Ç—É">
                      –ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–µ–º–æ–Ω—Ç—É
                    </SelectItem>
                  </SelectGroup>
                </SelectContent>
              </Select>
              {errors.cleaningType?.message && (
                <p className="text-red-500">{errors.cleaningType?.message}</p>
              )}
            </div>

            <AdditionalServicesSelect
              register={register}
              setValue={setValue}
              clearServices={clearServices}
            />

            <Textarea
              id="comment"
              {...register("comment")}
              placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            />
          </div>

          <DialogFooter className="mt-6 flex w-full justify-end gap-4">
            <DialogClose asChild onClick={clearErrors}>
              <Button type="button" variant="secondary">
                –ó–∞–∫—Ä–∏—Ç–∏
              </Button>
            </DialogClose>
            <Button type="submit">–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
